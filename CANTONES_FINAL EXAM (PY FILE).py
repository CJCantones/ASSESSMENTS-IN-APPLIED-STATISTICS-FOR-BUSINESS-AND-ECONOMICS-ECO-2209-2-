# -*- coding: utf-8 -*-
"""CANTONES_FinalExam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8f13rxSpCH7IWhrYfgdiPop7Q1icSVb
"""

#Linear Regression Libaries

import numpy as np #numerical python
import pandas as pd #data processing
import seaborn as sns #for regression plot
from statsmodels.formula.api import ols

df = pd.read_csv('/content/bert_pares.csv') #upload the data

#Check the dataset

df.head(5) #print the first 5 rows

#check the names of columns
df.columns

df.dtypes

df.shape #(rows, columns)

#Count ths missing values
df.isnull().sum()

#Replace the missing values with mean

df['sales'] = df['sales'].fillna(df['sales'].mean())
df['pares_kawali'] = df['pares_kawali'].fillna(df['pares_kawali'].mean())
df['pares_flowers'] = df['pares_flowers'].fillna(df['pares_flowers'].mean())

#Check for the missing values

df.isnull().sum()

#Compute for Summary Measures

df.describe()

#Compute for correlation coeffcient. Select the two variables the have the highest correlation (exclude days in the selection)
#your y is sales, select the appropriate x
df.corr()

#generate a regression plot
sns.regplot(x="pares_flowers", y="sales", data=df, ci=None)

#model: sales = intercept + slope * x

df_cleaned = df.fillna(df.mean())

X = df_cleaned[['pares_flowers']]
y = df_cleaned['sales']

model = LinearRegression()
model.fit(X, y)

intercept = model.intercept_
slope = model.coef_[0]

print(f"Model equation: sales = {intercept:.2f} + {slope:.2f} * pares_flowers")

#project the sales for the 32nd day using linear regression

pares_flowers_32 = df_cleaned['pares_flowers'].mean()
predicted_sales = model.predict([[pares_flowers_32]])

print(f"Predicted sales for the 32nd day: {predicted_sales[0]:.2f}")

"""##End of the Exam"""

